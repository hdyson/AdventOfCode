* Day 1

** Part 1:

#+BEGIN_QUOTE
--- Day 1: The Tyranny of the Rocket Equation ---

Santa has become stranded at the edge of the Solar System while delivering presents to other planets! To accurately calculate his position in space, safely align his warp drive, and return to Earth in time to save Christmas, he needs you to bring him measurements from fifty stars.

Collect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!

The Elves quickly load you into a spacecraft and prepare to launch.

At the first Go / No Go poll, every Elf is Go until the Fuel Counter-Upper. They haven't determined the amount of fuel required yet.

Fuel required to launch a given module is based on its mass. Specifically, to find the fuel required for a module, take its mass, divide by three, round down, and subtract 2.

For example:

For a mass of 12, divide by 3 and round down to get 4, then subtract 2 to get 2.
For a mass of 14, dividing by 3 and rounding down still yields 4, so the fuel required is also 2.
For a mass of 1969, the fuel required is 654.
For a mass of 100756, the fuel required is 33583.
The Fuel Counter-Upper needs to know the total fuel requirement. To find it, individually calculate the fuel needed for the mass of each module (your puzzle input), then add together all the fuel values.

What is the sum of the fuel requirements for all of the modules on your spacecraft?
#+END_QUOTE

*** Swift

[[https://www.hackingwithswift.com/example-code/strings/how-to-load-a-string-from-a-file-in-your-bundle][How to read a file]]

+ Create new project w/git repo
+ Using command line argument to define input file - means editing build scheme (toolbar menu) to add argument to run time config

#+BEGIN_EXAMPLE
//
//  main.swift
//  Advent of Code
//
//  Created by Harold Dyson on 12/02/2020.
//  Copyright © 2020 Harold Dyson. All rights reserved.
//

import Foundation


class Rocket{

    var total_fuel = 0
    var module_masses : String
    
    init(masses : String) {
        module_masses = masses
    }
    
    func calculate_module_fuel(mass:Int) -> Int {
        return Int(Float(mass)/3) - 2
    }

    func calculate_total_fuel() {
        for line in module_masses.components(separatedBy: "\n") {
            total_fuel += calculate_module_fuel(mass: Int(line) ?? 0)
        }
    }
}


if CommandLine.arguments.count < 2 {
    print("Needs to be called with an argument")
    exit(1)
}
let filename = CommandLine.arguments[1]
let contents = try String(contentsOfFile: filename)

let rocket = Rocket(masses: contents)
rocket.calculate_total_fuel()
    
print(rocket.total_fuel)

#+END_EXAMPLE

#+BEGIN_EXAMPLE
//
//  TestDayOne.swift
//  TestDayOne
//
//  Created by Harold Dyson on 12/02/2020.
//  Copyright © 2020 Harold Dyson. All rights reserved.
//

import XCTest

@testable import Advent_of_Code


class TestDayOne: XCTestCase {

    var rocket = Rocket(masses: "")
    
    override func setUp() {
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
    }

    func testPart1Example1() {
        let expected = 2
        let actual = rocket.calculate_module_fuel(mass: 12)
        XCTAssertTrue(actual == expected)
        // This is an example of a functional test case.
        // Use XCTAssert and related functions to verify your tests produce the correct results.
    }

    func testPart1Example2() {
        let expected = 2
        let actual = rocket.calculate_module_fuel(mass: 14)
        XCTAssertTrue(actual == expected)
        // This is an example of a functional test case.
        // Use XCTAssert and related functions to verify your tests produce the correct results.
    }

    func testPart1Example3() {
        let expected = 654
        let actual = rocket.calculate_module_fuel(mass: 1969)
        XCTAssertTrue(actual == expected)
        // This is an example of a functional test case.
        // Use XCTAssert and related functions to verify your tests produce the correct results.
    }

    func testPart1Example4() {
        let expected = 33583
        let actual = rocket.calculate_module_fuel(mass: 100756)
        XCTAssertTrue(actual == expected)
        // This is an example of a functional test case.
        // Use XCTAssert and related functions to verify your tests produce the correct results.
    }

}

#+END_EXAMPLE
